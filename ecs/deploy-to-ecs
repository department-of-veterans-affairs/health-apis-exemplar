#!/usr/bin/env bash
set -euo pipefail
. options.conf

CONFIG_VARS=(
  ALB_TARGET_GROUP_ARN
  AUTOSCALE_ROLE_ARN
  AWS_REGION
  AWS_SECRET_NAME
  CLUSTER
  ECR
  EXEMPLAR_VERSION
  SECURITY_GROUP
  SERVICE_NAME
  SUBNET_1
  SUBNET_2
  TASK_EXECUTION_ROLE
)

for v in ${CONFIG_VARS[@]}
do
  export $v
  if eval test -z \$$v; then echo "$v not defined"; exit 1; fi
done 
  


COMMAND=${1:-help}

help() {
cat<<EOF
$0 up|down|copy-to-ecr

up - Deploy to ECS
down - Undeploy artifacts
copy-to-ecr - Copy container images from Dockerhub to ECR

Configure options.conf to match your environment with 
the following variables:
EOF
for v in ${CONFIG_VARS[@]}; do echo "  $v"; done
}


process-templates() {
  cat docker-compose.yml.template | envsubst > docker-compose.yml
  cat ecs-params.yml.template | envsubst > ecs-params.yml
}

up() {
  process-templates
  ecs-cli \
    compose \
    --project-name $SERVICE_NAME \
    --ecs-params ecs-params.yml \
    --file docker-compose.yml \
    service up \
    --create-log-groups \
    --cluster $CLUSTER \
    --launch-type FARGATE \
    --target-groups "targetGroupArn=$ALB_TARGET_GROUP_ARN,containerName=exemplar,containerPort=8080"

  #
  # Currently, size cannot be set on service up and must be done separately
  # if you want to use static sizing you'd uncomment this and comment the
  # the autoscale configuration below. 
  #
  #ecs-cli \
  #  compose \
  #  --project-name $SERVICE_NAME \
  #  --ecs-params ecs-params.yml \
  #  --file docker-compose.yml \
  #  service scale 2 \
  #  --cluster $CLUSTER 
  autoscale
}

autoscale() {
  aws application-autoscaling register-scalable-target \
    --resource-id "service/$CLUSTER/$SERVICE_NAME" \
    --service-namespace ecs \
    --scalable-dimension ecs:service:DesiredCount \
    --min-capacity 1 \
    --max-capacity 3 \
    --role-arn "$AUTOSCALE_ROLE_ARN"

  cat > tmp.policy <<EOF
{
  "PolicyName": "target-tracking-$SERVICE_NAME",
  "ServiceNamespace": "ecs",
  "ResourceId": "service/$CLUSTER/$SERVICE_NAME",
  "ScalableDimension": "ecs:service:DesiredCount",
  "PolicyType": "TargetTrackingScaling",
  "TargetTrackingScalingPolicyConfiguration": {
     "TargetValue": 50,
     "PredefinedMetricSpecification": {
       "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
     },
    "ScaleOutCooldown": 60,
    "ScaleInCooldown": 60,
    "DisableScaleIn": false
  }
}
EOF
  aws application-autoscaling put-scaling-policy --cli-input-json file://tmp.policy
}

down() {
  process-templates
  ecs-cli \
    compose \
    --project-name $SERVICE_NAME \
    --ecs-params ecs-params.yml \
    --file docker-compose.yml \
    service down \
    --cluster $CLUSTER 
}

move-to-ecr() {
  FROM=vasdvp/health-apis-exemplar:$EXEMPLAR_VERSION
  TO=$ECR/health-apis-exemplar:$EXEMPLAR_VERSION

  docker pull $FROM
  docker tag $FROM $TO
  aws ecr get-login-password | docker login -u AWS --password-stdin $ECR/health-apis-exemplar
  docker push $TO
}

$COMMAND
